import pandas as pd
import streamlit as st
from datetime import datetime, timedelta
import plotly.express as px
from io import BytesIO
import xlsxwriter
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# Fonction de chargement des donn√©es
@st.cache_data
def charger_donnees(fichier):
    return pd.read_excel(fichier)

# Fonction pour convertir un dataframe en fichier XLSX
def convert_df_to_xlsx(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Sheet1')
    return output.getvalue()

# Fonction pour g√©n√©rer un PDF
def generate_pdf(df, filename="tableau.pdf"):
    c = canvas.Canvas(filename, pagesize=letter)
    width, height = letter
    c.drawString(30, height - 40, "Tableau des r√©p√©titions des op√©rateurs")
    
    y_position = height - 60
    for i, row in df.iterrows():
        text = f"{row['Pr√©nom et nom']} : {row['Repetitions']}"
        c.drawString(30, y_position, text)
        y_position -= 20
    
    c.save()

# Configuration de la page Streamlit
st.set_page_config(page_title="Analyse des Interventions", page_icon="üìä", layout="wide")

st.title("üìä Analyse des interventions des op√©rateurs")

# Chargement du fichier Excel
fichier_principal = st.file_uploader("Choisissez le fichier principal (donnee_Aesma.xlsx)", type="xlsx")

if fichier_principal is not None:
    df_principal = charger_donnees(fichier_principal)
    
    col1, col2 = st.columns([1, 2])
    
    with col1:
        # S√©lection de la colonne pour 'Pr√©nom et nom' et de la colonne de date
        col_prenom_nom = df_principal.columns[4]  # S√©lection automatique de la premi√®re colonne
        col_date = st.selectbox("Choisissez la colonne de date", df_principal.columns)
        
        operateurs = df_principal[col_prenom_nom].unique()
        operateurs_selectionnes = st.multiselect("Choisissez un ou plusieurs op√©rateurs", operateurs)
        
        periodes = ["Jour", "Semaine", "Mois", "Trimestre", "Ann√©e", "Total"]
        periode_selectionnee = st.selectbox("Choisissez une p√©riode", periodes)
        
        # Tentative de conversion des dates avec gestion des erreurs
        df_principal[col_date] = pd.to_datetime(df_principal[col_date], errors='coerce')
        
        # G√©rer les dates invalides et d√©finir les bornes min et max des dates valides
        date_min = df_principal[col_date].min()
        date_max = df_principal[col_date].max()

        # Si les dates sont invalides, on avertit l'utilisateur
        if pd.isna(date_min) or pd.isna(date_max):
            st.warning("Certaines dates dans le fichier sont invalides. Elles ont √©t√© ignor√©es.")
            date_min = date_max = None
        
        debut_periode = st.date_input("D√©but de la p√©riode", min_value=date_min, max_value=date_max, value=date_min)
        fin_periode = st.date_input("Fin de la p√©riode", min_value=debut_periode, max_value=date_max, value=date_max)
    
    # Quand le bouton "Analyser" est cliqu√©
    if st.button("Analyser"):
        # Filtrage des donn√©es pour garder seulement les dates valides
        df_principal = df_principal.dropna(subset=[col_date])  # Suppression des lignes avec des dates invalides

        # Ajout des p√©riodes (Jour, Semaine, Mois, Trimestre, Ann√©e)
        df_principal['Jour'] = df_principal[col_date].dt.date
        df_principal['Semaine'] = df_principal[col_date].dt.to_period('W').astype(str)
        df_principal['Mois'] = df_principal[col_date].dt.to_period('M').astype(str)
        df_principal['Trimestre'] = df_principal[col_date].dt.to_period('Q').astype(str)
        df_principal['Ann√©e'] = df_principal[col_date].dt.year

        # Filtrer les donn√©es pour la p√©riode s√©lectionn√©e
        df_graph = df_principal[(df_principal[col_date].dt.date >= debut_periode) & (df_principal[col_date].dt.date <= fin_periode)]

        # Choisir les colonnes pour grouper les donn√©es
        groupby_cols = [col_prenom_nom]
        if periode_selectionnee != "Total":
            groupby_cols.append(periode_selectionnee)
        
        # Calcul des r√©p√©titions pour le graphique
        repetitions_graph = df_graph[df_graph[col_prenom_nom].isin(operateurs_selectionnes)].groupby(groupby_cols).size().reset_index(name='Repetitions')

        # Calcul des r√©p√©titions pour le tableau (toutes les dates)
        repetitions_tableau = df_principal[df_principal[col_prenom_nom].isin(operateurs_selectionnes)].groupby(groupby_cols).size().reset_index(name='Repetitions')
        
        # Affichage du graphique avec les valeurs des r√©p√©titions et couleurs par op√©rateur
        with col2:
            fig = px.bar(repetitions_graph, 
                         x=periode_selectionnee if periode_selectionnee != "Jour" else col_prenom_nom,
                         y='Repetitions',
                         barmode='group',
                         color=col_prenom_nom,  # Ajout de la colonne 'Pr√©nom et nom' pour les couleurs
                         title=f"Nombre de rapports d'intervention (du {debut_periode} au {fin_periode})")
            fig.update_traces(text=repetitions_graph['Repetitions'], textposition='outside')
            st.plotly_chart(fig)
        
        # Affichage du tableau des r√©p√©titions
        st.subheader(f"Tableau du nombre des rapports d'intervention par {periode_selectionnee.lower()} (toutes les dates)")
        
        # Utiliser uniquement les colonnes du fichier principal sans ajout de nouvelles colonnes
        colonnes_affichage = [col_prenom_nom, periode_selectionnee, 'Repetitions'] if periode_selectionnee != "Total" else [col_prenom_nom, 'Repetitions']
        tableau_affichage = repetitions_tableau[colonnes_affichage]
        
        st.dataframe(tableau_affichage, use_container_width=True)

        # Tirage au sort pour deux lignes par op√©rateur
        st.subheader("Tirage au sort de deux lignes par op√©rateur")
        df_filtre = df_principal[(df_principal[col_date].dt.date >= debut_periode) & (df_principal[col_date].dt.date <= fin_periode)]
        for operateur in operateurs_selectionnes:
            st.write(f"Tirage pour {operateur}:")
            df_operateur = df_filtre[df_filtre[col_prenom_nom] == operateur]
            lignes_tirees = df_operateur.sample(n=min(2, len(df_operateur)))
            if not lignes_tirees.empty:
                # Affichage des photos cliquables et t√©l√©chargeables
                lignes_tirees['Photo'] = lignes_tirees['Photo'].apply(lambda x: f'<a href="{x}" target="_blank"><img src="{x}" width="100"/></a>')
                lignes_tirees['Photo 2'] = lignes_tirees['Photo 2'].apply(lambda x: f'<a href="{x}" target="_blank"><img src="{x}" width="100"/></a>')
                # Utiliser markdown pour afficher les images en HTML
                st.markdown(lignes_tirees.to_html(escape=False), unsafe_allow_html=True)
            else:
                st.write("Pas de donn√©es disponibles pour cet op√©rateur dans la p√©riode s√©lectionn√©e.")
            st.write("---")
                            
        # T√©l√©chargement du fichier XLSX
        st.subheader("T√©l√©charger le tableau des rapports d'interventions")
        xlsx_data = convert_df_to_xlsx(repetitions_tableau)
        st.download_button(label="T√©l√©charger en XLSX", data=xlsx_data, file_name="NombredesRapports.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        
        # T√©l√©chargement du fichier PDF
        st.subheader("T√©l√©charger le tableau des rapports d'interventions en PDF")
        pdf_filename = "repetitions.pdf"
        generate_pdf(repetitions_tableau, pdf_filename)
        with open(pdf_filename, "rb") as f:
            st.download_button(label="T√©l√©charger en PDF", data=f, file_name=pdf_filename, mime="application/pdf")
    
    # Option pour afficher toutes les donn√©es
    if st.checkbox("Afficher toutes les donn√©es"):
        st.dataframe(df_principal)  # Parenth√®se ferm√©e correctement ici
